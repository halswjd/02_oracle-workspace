
-- 1. 출판사들에 대한 데이터를 담기 위한 출판사 테이블(TB_PUBLISHER)
CREATE TABLE TB_PUBLISHER(
    PUB_NO NUMBER CONSTRAINT PUBLISHER_PK PRIMARY KEY,
    PUB_NAME VARCHAR2(40) CONSTRAINT PUBLISHER_NN NOT NULL,
    PHONE VARCHAR2(14)
);

COMMENT ON COLUMN TB_PUBLISHER.PUB_NO IS '출판사번호';
COMMENT ON COLUMN TB_PUBLISHER.PUB_NAME IS '출판사명';
COMMENT ON COLUMN TB_PUBLISHER.PHONE IS '출판사전화번호';

INSERT INTO TB_PUBLISHER VALUES(1, '꿈나라', '02-123-456');
INSERT INTO TB_PUBLISHER VALUES(2, '달나라', '032-123-456');
INSERT INTO TB_PUBLISHER VALUES(3, '별나라', '055-123-456');

SELECT * FROM TB_PUBLISHER;

-- 2. 도서들에 대한 데이터를 담기 위한 도서 테이블(TB_BOOK)
CREATE TABLE TB_BOOK(
    BK_NO NUMBER CONSTRAINT BOOK_PK PRIMARY KEY,
    BK_TITLE VARCHAR2(50) CONSTRAINT BOOK_NN_TITLE NOT NULL,
    BK_AUTHOR VARCHAR2(20) CONSTRAINT BOOK_NN_AUTHOR NOT NULL,
    BK_PRICE NUMBER,
    BK_STOCK NUMBER DEFAULT 1,
    BK_PUB_NO NUMBER CONSTRAINT BOOK_FK REFERENCES TB_PUBLISHER ON DELETE CASCADE
);

COMMENT ON COLUMN TB_BOOK.BK_NO IS '도서번호';
COMMENT ON COLUMN TB_BOOK.BK_TITLE IS '도서명';
COMMENT ON COLUMN TB_BOOK.BK_AUTHOR IS '저자명';
COMMENT ON COLUMN TB_BOOK.BK_PRICE IS '가격';
COMMENT ON COLUMN TB_BOOK.BK_STOCK IS '재고';
COMMENT ON COLUMN TB_BOOK.BK_PUB_NO IS '출판사번호';

INSERT INTO TB_BOOK VALUES (100, '자바의정석', '김자바', 30000, 5, 1);
INSERT INTO TB_BOOK VALUES (101, 'SQL의정석', '김정석', 25000, DEFAULT, 3);
INSERT INTO TB_BOOK VALUES (102, 'WHY', '글쓴이', 10000, 3, 2);
INSERT INTO TB_BOOK VALUES (103, '가나다라', '하한글', 30000, 5, 1);
INSERT INTO TB_BOOK VALUES (104, '쇼킹한게딱좋아', '도라에몽', 21000, DEFAULT, 2);

SELECT * FROM TB_BOOK;

-- 3. 회원에 대한 데이터를 담기 위한 회원 테이블(TB_MEMBER)
CREATE TABLE TB_MEMBER(
    MEMBER_NO NUMBER CONSTRAINT MEMBER_PK PRIMARY KEY,
    MEMBER_ID VARCHAR2(20) CONSTRAINT MEMBER_UQ UNIQUE,
    MEMBER_PWD VARCHAR2(20) CONSTRAINT MEMBER_NN_PWD NOT NULL,
    MEMBER_NAME VARCHAR2(20) CONSTRAINT MEMBER_NN_NAME NOT NULL,
    GENDER CHAR(1) CONSTRAINT MEMBER_CK_GEN CHECK(GENDER IN ('M','F')),
    ADDRESS VARCHAR2(50),
    PHONE VARCHAR2(15),
    STATUS CHAR(1) DEFAULT 'N' CONSTRAINT MEMVER_CK_STA CHECK(STATUS IN ('Y', 'N')),
    ENROLL_DATE DATE DEFAULT SYSDATE CONSTRAINT MEMBER_NN_EN NOT NULL
);

INSERT INTO TB_MEMBER VALUES (900, 'mmm1234', 'mmm1234', '하민정', 'F', null, null, default, '20/10/30');
INSERT INTO TB_MEMBER VALUES (901, 'ggg1234', 'ggg1234', '뚜비', 'M', '경남 거제시', '01012341234', default, '20/10/30');
INSERT INTO TB_MEMBER VALUES (902, 'hhh1234', 'hhh1234', '나나', 'F', '부산광역시', null, 'Y', '21/11/02');
INSERT INTO TB_MEMBER VALUES (903, 'jjj1234', 'jjj1234', '뽀', 'M', null, '01011112222', default, default);
INSERT INTO TB_MEMBER VALUES (904, 'hmj1234', 'hmj1234', '보라돌이', 'M', '서울특별시', null, default, default);

COMMENT ON COLUMN TB_MEMBER.MEMBER_NO IS '회원번호';
COMMENT ON COLUMN TB_MEMBER.MEMBER_ID IS '아이디';
COMMENT ON COLUMN TB_MEMBER.MEMBER_PWD IS '비밀번호';
COMMENT ON COLUMN TB_MEMBER.MEMBER_NAME IS '회원명';
COMMENT ON COLUMN TB_MEMBER.GENDER IS '성별';
COMMENT ON COLUMN TB_MEMBER.ADDRESS IS '주소';
COMMENT ON COLUMN TB_MEMBER.PHONE IS '연락처';
COMMENT ON COLUMN TB_MEMBER.STATUS IS '탈퇴여부';
COMMENT ON COLUMN TB_MEMBER.ENROLL_DATE IS '가입일';




--4. 도서를 대여한 회원에 대한 데이터를 담기 위한 대여목록 테이블(TB_RENT)
CREATE TABLE TB_RENT(
    RENT_NO NUMBER CONSTRAINT RENT_PK PRIMARY KEY,
    RENT_MEM_NO NUMBER CONSTRAINT RENT_FK_MEM REFERENCES TB_MEMBER ON DELETE SET NULL,
    RENT_BOOK_NO NUMBER CONSTRAINT RENT_FK_BOOK REFERENCES TB_BOOK ON DELETE SET NULL,
    RENT_DATE DATE DEFAULT SYSDATE
);
 
INSERT INTO TB_RENT VALUES (10, 900, 101, DEFAULT);
INSERT INTO TB_RENT VALUES (11, 904, 100, '23/07/02');
INSERT INTO TB_RENT VALUES (12, 901, 103, '23/07/03');

COMMENT ON COLUMN TB_RENT.RENT_NO IS '대여번호';
COMMENT ON COLUMN TB_RENT.RENT_MEM_NO IS '대여회원번호';
COMMENT ON COLUMN TB_RENT.RENT_BOOK_NO IS '대여도서번호';
COMMENT ON COLUMN TB_RENT.RENT_DATE IS '대여일';

-- 103번 도서를 대여한 회원의 이름, 아이디, 대여일, 반납예정일(대여일+7)을 조회하시오
SELECT MEMBER_NAME AS "회원명", MEMBER_ID AS"아이디", RENT_DATE AS "대여일", 
        TO_CHAR(RENT_DATE + INTERVAL '7' DAY, 'YY-MM-DD') AS "반납예정일"
FROM TB_MEMBER
JOIN TB_RENT ON (MEMBER_NO = RENT_MEM_NO)
WHERE RENT_BOOK_NO = 103;

SELECT * FROM TB_MEMBER; -- MEMBER_NO
SELECT * FROM TB_RENT; -- RENT_MEM_NO



